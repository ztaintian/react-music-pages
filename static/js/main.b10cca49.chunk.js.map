{"version":3,"sources":["pages/Header/index.js","pages/List/index.js","pages/Index/index.js","serviceWorker.js","index.js"],"names":["Header","List","useState","songResultData","result","data","setData","name","pageNo","pageSize","contentId","setContentId","audio","useRef","useEffect","a","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","res","JSON","parse","responseText","code","alert","info","send","fetchData","console","log","className","map","item","index","key","onClick","ref","controls","onEnded","length","autoPlay","src","Index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAQeA,MANf,WACE,OACE,8C,2CCiEWC,MAlEf,WAAiB,IAAD,EACUC,mBAAS,CAAEC,eAAgB,CAAEC,OAAQ,MAD/C,mBACPC,EADO,KACDC,EADC,OAEUJ,mBAAS,sBAFnB,mBAEPK,EAFO,aAGcL,mBAAS,IAHvB,mBAGPM,EAHO,aAIkBN,mBAAS,KAJ3B,mBAIPO,EAJO,aAKkBP,mBAAS,OAL3B,mBAKTQ,EALS,KAKEC,EALF,KAMRC,EAAQC,iBAAO,MAyBrBC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,sEAnBX,IAAIC,SAAQ,SAACC,EAAQC,GAC1B,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAT,6GAAsHd,EAAtH,mBAAqIC,EAArI,qBAAwJC,EAAxJ,mGAAkQ,GAClQU,EAAIG,mBAAqB,WACvB,GAAsB,GAAlBH,EAAII,YACY,KAAdJ,EAAIK,OAAe,CACrB,IAAIC,EAAMC,KAAKC,MAAMR,EAAIS,cACR,WAAbH,EAAII,KACNvB,EAAQmB,GAERK,MAAML,EAAIM,QAKlBZ,EAAIa,UAIY,2CAAH,qDAGfC,KACC,IACHC,QAAQC,IAAI,QAASvB,GArCP,IAsCUR,EAAaC,EAA/BF,eAAkBC,OACxB,OACE,yBAAKgC,UAAU,QACZhC,EAAOiC,KAAI,SAACC,EAAMC,GACjB,OACE,yBAAKC,IAAKD,EAAOE,QAAS,WACxB9B,EAAa2B,EAAK5B,aAChB4B,EAAK/B,SAGb,2BAAOmC,IAAK9B,EAAO+B,UAAQ,EAACC,QAAS,WACnCxC,EAAOiC,KAAI,SAACC,EAAKC,GACX7B,IAAc4B,EAAK5B,YAEnBA,EADE6B,IAAUnC,EAAOyC,OAAO,EACdzC,EAAO,GAAGM,UAEVN,EAAOmC,EAAM,GAAG7B,cAIlCC,EAAaD,IACZoC,UAAQ,EAACC,IAAG,qLAAgLrC,EAAhL,8BAXf,+ECxCSsC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD2H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b10cca49.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>头部</div>\r\n  )\r\n}\r\n\r\nexport default Header","import React, { useState, useEffect, useRef } from 'react'\r\nimport axios from 'axios'\r\nimport './list.styl'\r\nfunction List() {\r\n  const [data, setData] = useState({ songResultData: { result: [] } });\r\n  const [name, setName] = useState('刘德华');\r\n  const [pageNo, setPageNo] = useState(1);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  let [contentId, setContentId] = useState(null);\r\n  const audio = useRef(null)\r\n  function getSong() {\r\n    // return axios.get(\r\n    //   `http://pd.musicapp.migu.cn/MIGUM2.0/v1.0/content/search_all.do?&ua=Android_migu&version=5.0.1&text=${name}&pageNo=${pageNo}&pageSize=${pageSize}&searchSwitch={\"song\":1,\"album\":0,\"singer\":0,\"tagSong\":0,\"mvSong\":0,\"songlist\":0,\"bestShow\":1}`,\r\n    // ).then((result) => {\r\n    //   setData(result.data);\r\n    // });\r\n    return new Promise((resolve,reject) => {\r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open(\"get\", `http://pd.musicapp.migu.cn/MIGUM2.0/v1.0/content/search_all.do?&ua=Android_migu&version=5.0.1&text=${name}&pageNo=${pageNo}&pageSize=${pageSize}&searchSwitch={\"song\":1,\"album\":0,\"singer\":0,\"tagSong\":0,\"mvSong\":0,\"songlist\":0,\"bestShow\":1}`, true);\r\n      xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4) {\r\n          if (xhr.status == 200) {\r\n            let res = JSON.parse(xhr.responseText)\r\n            if (res.code === '000000') {\r\n              setData(res)\r\n            } else {\r\n              alert(res.info)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      xhr.send();\r\n    })\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await getSong()\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  console.log('audio', audio)\r\n  let { songResultData: { result } } = data\r\n  return (\r\n    <div className=\"list\">\r\n      {result.map((item, index) => {\r\n        return (\r\n          <div key={index} onClick={() => {\r\n            setContentId(item.contentId)\r\n          }}>{item.name}</div>\r\n        )\r\n      })}\r\n      <audio ref={audio} controls onEnded={() => {\r\n        result.map((item,index) => {\r\n          if (contentId === item.contentId) {\r\n            if (index === result.length-1) {\r\n              contentId = result[0].contentId\r\n            } else {\r\n              contentId = result[index+1].contentId\r\n            }\r\n          }\r\n        })\r\n        setContentId(contentId)\r\n      }} autoPlay src={`http://app.pd.nf.migu.cn/MIGUM2.0/v1.0/content/sub/listenSong.do?toneFlag=HQ&netType=00&userId=15548614588710179085069&ua=Android_migu&version=5.1&copyrightId=0&contentId=${contentId}&resourceType=2&channel=1`}>\r\n        您的浏览器不支持 audio 标签。\r\n      </audio>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List","import React from 'react'\r\nimport Header from '../Header'\r\nimport List from '../List'\r\nfunction Index() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <List />\r\n    </div>\r\n  )\r\n}\r\nexport default Index\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Index from './pages/Index/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}